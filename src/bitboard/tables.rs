//! <Module description goes here>

use super::Bitboard;

pub const KNIGHT_ATTACK_LUT: [Bitboard; 0] = [];
pub const BISHOP_ATTACK_LUT: [Bitboard; 0] = [];
pub const ROOK_ATTACK_LUT: [Bitboard; 0] = [];
pub const KING_ATTACK_LUT: [Bitboard; 0] = [];

pub const KNIGHT_MASK_LUT: [Bitboard; 64] =
[
    0x0000000000020400, 0x0000000000050800, 0x00000000000A1100, 0x0000000000142200, 0x0000000000284400, 0x0000000000508800, 0x0000000000A01000, 0x0000000000402000,
    0x0000000002040004, 0x0000000005080008, 0x000000000A110011, 0x0000000014220022, 0x0000000028440044, 0x0000000050880088, 0x00000000A0100010, 0x0000000040200020,
    0x0000000204000402, 0x0000000508000805, 0x0000000A1100110A, 0x0000001422002214, 0x0000002844004428, 0x0000005088008850, 0x000000A0100010A0, 0x0000004020002040,
    0x0000020400040200, 0x0000050800080500, 0x00000A1100110A00, 0x0000142200221400, 0x0000284400442800, 0x0000508800885000, 0x0000A0100010A000, 0x0000402000204000,
    0x0002040004020000, 0x0005080008050000, 0x000A1100110A0000, 0x0014220022140000, 0x0028440044280000, 0x0050880088500000, 0x00A0100010A00000, 0x0040200020400000,
    0x0204000402000000, 0x0508000805000000, 0x0A1100110A000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xA0100010A0000000, 0x4020002040000000,
    0x0400040200000000, 0x0800080500000000, 0x1100110A00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010A000000000, 0x2000204000000000,
    0x0004020000000000, 0x0008050000000000, 0x00110A0000000000, 0x0022140000000000, 0x0044280000000000, 0x0088500000000000, 0x0010A00000000000, 0x0020400000000000,
];
pub const BISHOP_MASK_LUT: [Bitboard; 64] =
[
    0x8040201008040200, 0x0080402010080500, 0x0000804020110A00, 0x0000008041221400, 0x0000000182442800, 0x0000010204885000, 0x000102040810A000, 0x0102040810204000,
    0x4020100804020002, 0x8040201008050005, 0x00804020110A000A, 0x0000804122140014, 0x0000018244280028, 0x0001020488500050, 0x0102040810A000A0, 0x0204081020400040,
    0x2010080402000204, 0x4020100805000508, 0x804020110A000A11, 0x0080412214001422, 0x0001824428002844, 0x0102048850005088, 0x02040810A000A010, 0x0408102040004020,
    0x1008040200020408, 0x2010080500050810, 0x4020110A000A1120, 0x8041221400142241, 0x0182442800284482, 0x0204885000508804, 0x040810A000A01008, 0x0810204000402010,
    0x0804020002040810, 0x1008050005081020, 0x20110A000A112040, 0x4122140014224180, 0x8244280028448201, 0x0488500050880402, 0x0810A000A0100804, 0x1020400040201008,
    0x0402000204081020, 0x0805000508102040, 0x110A000A11204080, 0x2214001422418000, 0x4428002844820100, 0x8850005088040201, 0x10A000A010080402, 0x2040004020100804,
    0x0200020408102040, 0x0500050810204080, 0x0A000A1120408000, 0x1400142241800000, 0x2800284482010000, 0x5000508804020100, 0xA000A01008040201, 0x4000402010080402,
    0x0002040810204080, 0x0005081020408000, 0x000A112040800000, 0x0014224180000000, 0x0028448201000000, 0x0050880402010000, 0x00A0100804020100, 0x0040201008040201,
];
pub const ROOK_MASK_LUT: [Bitboard; 64] =
[
    0x01010101010101FE, 0x02020202020202FD, 0x04040404040404FB, 0x08080808080808F7, 0x10101010101010EF, 0x20202020202020DF, 0x40404040404040BF, 0x808080808080807F,
    0x010101010101FE01, 0x020202020202FD02, 0x040404040404FB04, 0x080808080808F708, 0x101010101010EF10, 0x202020202020DF20, 0x404040404040BF40, 0x8080808080807F80,
    0x0101010101FE0101, 0x0202020202FD0202, 0x0404040404FB0404, 0x0808080808F70808, 0x1010101010EF1010, 0x2020202020DF2020, 0x4040404040BF4040, 0x80808080807F8080,
    0x01010101FE010101, 0x02020202FD020202, 0x04040404FB040404, 0x08080808F7080808, 0x10101010EF101010, 0x20202020DF202020, 0x40404040BF404040, 0x808080807F808080,
    0x010101FE01010101, 0x020202FD02020202, 0x040404FB04040404, 0x080808F708080808, 0x101010EF10101010, 0x202020DF20202020, 0x404040BF40404040, 0x8080807F80808080,
    0x0101FE0101010101, 0x0202FD0202020202, 0x0404FB0404040404, 0x0808F70808080808, 0x1010EF1010101010, 0x2020DF2020202020, 0x4040BF4040404040, 0x80807F8080808080,
    0x01FE010101010101, 0x02FD020202020202, 0x04FB040404040404, 0x08F7080808080808, 0x10EF101010101010, 0x20DF202020202020, 0x40BF404040404040, 0x807F808080808080,
    0xFE01010101010101, 0xFD02020202020202, 0xFB04040404040404, 0xF708080808080808, 0xEF10101010101010, 0xDF20202020202020, 0xBF40404040404040, 0x7F80808080808080,
];
pub const KING_MASK_LUT: [Bitboard; 64] =
[
    0x0000000000000302, 0x0000000000000704, 0x0000000000000E0A, 0x0000000000001C14, 0x0000000000003828, 0x0000000000007050, 0x0000000000006020, 0x000000000001C140,
    0x0000000000030283, 0x0000000000070406, 0x00000000000E0A0E, 0x00000000001C141C, 0x0000000000382838, 0x0000000000705070, 0x00000000006020E0, 0x0000000001C140C0,
    0x0000000003028380, 0x0000000007040600, 0x000000000E0A0E00, 0x000000001C141C00, 0x0000000038283800, 0x0000000070507000, 0x000000006020E000, 0x00000001C140C000,
    0x0000000302838000, 0x0000000704060000, 0x0000000E0A0E0000, 0x0000001C141C0000, 0x0000003828380000, 0x0000007050700000, 0x0000006020E00000, 0x000001C140C00000,
    0x0000030283800000, 0x0000070406000000, 0x00000E0A0E000000, 0x00001C141C000000, 0x0000382838000000, 0x0000705070000000, 0x00006020E0000000, 0x0001C140C0000000,
    0x0003028380000000, 0x0007040600000000, 0x000E0A0E00000000, 0x001C141C00000000, 0x0038283800000000, 0x0070507000000000, 0x006020E000000000, 0x01C140C000000000,
    0x0302838000000000, 0x0704060000000000, 0x0E0A0E0000000000, 0x1C141C0000000000, 0x3828380000000000, 0x7050700000000000, 0x6020E00000000000, 0xC140C00000000000,
    0x0283800000000000, 0x0406000000000000, 0x0A0E000000000000, 0x141C000000000000, 0x2838000000000000, 0x5070000000000000, 0x20E0000000000000, 0x40C0000000000000,
];

/// Generates all occupancies for any given mask.
fn get_all_occupancies(mask: u64, lut_ptr: &mut Vec<u64>)
{
    let mut occ = mask;

    for _ in 0 .. (1 << mask.count_ones()) - 1
    {
        occ = occ.saturating_sub(1);
        occ &= mask;
        lut_ptr.push(occ);
    }
}

/// Generates all legal knight attacks with an offset to speed up attack lookup.
pub fn create_knight_attack_lut() -> (Vec<Bitboard>, [usize; 64])
{
    let mut table = Vec::new();
    let mut offset: [usize; 64] = [0; 64];

    for (i, mask) in KNIGHT_MASK_LUT.iter().enumerate()
    {
        offset[i] = table.len();
        table.push(*mask);

        get_all_occupancies(*mask, &mut table);
    }

    (table, offset)
}

/// Generates all legal bishop attacks with an offset to speed up attack lookup.
pub fn create_bishop_attack_lut() -> (Vec<Bitboard>, [usize; 64])
{
    let mut table = Vec::new();
    let mut offset: [usize; 64] = [0; 64];

    for (i, mask) in BISHOP_MASK_LUT.iter().enumerate()
    {
        offset[i] = table.len();
        table.push(*mask);

        get_all_occupancies(*mask, &mut table);
    }

    (table, offset)
}

pub fn create_rook_attack_lut() { todo!() }

pub fn create_king_attack_lut() { todo!() }

/// Generates all legal knight moves.
pub fn create_knight_mask_lut() -> [Bitboard; 64]
{
    const NOT_FILE_A: Bitboard = 0x7F7F7F7F7F7F7F7F;
    const NOT_FILE_AB: Bitboard = 0x3F3F3F3F3F3F3F3F;
    const NOT_FILE_H: Bitboard = 0xFEFEFEFEFEFEFEFE;
    const NOT_FILE_GH: Bitboard = 0xFCFCFCFCFCFCFCFC;

    let mut table: [Bitboard; 64] = [0; 64];

    for (i, square) in table.iter_mut().enumerate()
    {
        let knight = 1 << i;
        let (l1, l2) = (((knight >> 1) & NOT_FILE_A), ((knight >> 2) & NOT_FILE_AB));
        let (r1, r2) = (((knight << 1) & NOT_FILE_H), ((knight << 2) & NOT_FILE_GH));
        let (h1, h2) = ((l1 | r1), (l2 | r2));

        *square = (h1 << 16) | (h1 >> 16) | (h2 << 8) | (h2 >> 8);
    }

    table
}

/// Generates all legal bishop moves.
pub fn create_bishop_mask_lut() -> [Bitboard; 64]
{
    const DIAGONAL: Bitboard = 0x8040201008040201;
    const ANTIDIAG: Bitboard = 0x0102040810204080;

    let mut table: [Bitboard; 64] = [0; 64];

    for (i, square) in table.iter_mut().enumerate()
    {
        let bishop = 1 << i;
        let (d1, d2) = ((8 * (i & 7)).wrapping_sub(i & 56), (56usize.wrapping_sub(8 * (i & 7)).wrapping_sub(i & 56)));
        let (n1, n2) = (d1.wrapping_neg() & (d1 >> 31), d2.wrapping_neg() & (d2 >> 31));
        let (s1, s2) = (d1 & (d1.wrapping_neg() >> 31), d2 & (d2.wrapping_neg() >> 31));

        *square = bishop ^ (((DIAGONAL >> s1) << n1) | ((ANTIDIAG >> s2) << n2));
    }

    table
}

/// Generates all legal rook moves.
pub fn create_rook_mask_lut() -> [Bitboard; 64]
{
    const RANK: Bitboard = 0x00000000000000FF;
    const FILE: Bitboard = 0x0101010101010101;

    let mut table: [Bitboard; 64] = [0; 64];

    for (i, square) in table.iter_mut().enumerate()
    {
        let rook = 1 << i;
        let (r, f) = (RANK << (i & 56), FILE << (i & 7));

        *square = rook ^ (r | f);
    }

    table
}

/// Generates all legal king moves.
pub fn create_king_mask_lut() -> [Bitboard; 64]
{
    const NOT_FILE_A: Bitboard = 0x7F7F7F7F7F7F7F7F;
    const NOT_FILE_H: Bitboard = 0xFEFEFEFEFEFEFEFE;

    let mut table: [Bitboard; 64] = [0; 64];

    for (i, square) in table.iter_mut().enumerate()
    {
        let king = 1 << i;
        let (n, s) = (king << 8, king >> 8);
        let (e, w) = ((king << 1) & NOT_FILE_A, (king >> 1) & NOT_FILE_H);
        let (ne, sw) = ((king << 9) & NOT_FILE_A, (king >> 9) & NOT_FILE_H);
        let (nw, se) = ((king << 7) & NOT_FILE_A, (king >> 7) & NOT_FILE_H);

        *square = n | s | e | w | ne | sw | nw | se;
    }

    table
}
